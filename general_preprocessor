{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.11"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":14242,"databundleVersionId":568274,"sourceType":"competition"}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"%pip install scikit-learn imbalanced-learn==0.11.0\n%pip install matplotlib\n%pip install seaborn\n%pip install mlflow dagshub\n%pip install xgboost","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport warnings\nimport dagshub\nimport mlflow\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.pipeline import Pipeline as ImbPipeline\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.status.busy":"2025-04-22T02:46:57.252943Z","iopub.execute_input":"2025-04-22T02:46:57.253187Z","iopub.status.idle":"2025-04-22T02:47:03.354446Z","shell.execute_reply.started":"2025-04-22T02:46:57.253167Z","shell.execute_reply":"2025-04-22T02:47:03.353594Z"},"trusted":true},"outputs":[{"name":"stdout","text":"/kaggle/input/ieee-fraud-detection/sample_submission.csv\n/kaggle/input/ieee-fraud-detection/test_identity.csv\n/kaggle/input/ieee-fraud-detection/train_identity.csv\n/kaggle/input/ieee-fraud-detection/test_transaction.csv\n/kaggle/input/ieee-fraud-detection/train_transaction.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 15)\npd.set_option('display.width', None)\npd.set_option('display.expand_frame_repr', False)\n\n# to ignore warnings in cells\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2025-04-22T02:47:03.355245Z","iopub.execute_input":"2025-04-22T02:47:03.355718Z","iopub.status.idle":"2025-04-22T02:47:03.360759Z","shell.execute_reply.started":"2025-04-22T02:47:03.355669Z","shell.execute_reply":"2025-04-22T02:47:03.359940Z"},"trusted":true},"outputs":[],"execution_count":3},{"cell_type":"code","source":"random_state = 42\n\ndef show_na_means(df):\n  na_means = df.isna().mean().sort_values(ascending=False)\n  print(na_means[na_means > 0])\n\ndef get_cat_num_cols(df):\n  cat_cols = [col for col in df.columns if df[col].dtype == 'object']\n  num_cols = [col for col in df.columns if df[col].dtype != 'object']\n  return (cat_cols, num_cols)","metadata":{"execution":{"iopub.status.busy":"2025-04-22T02:47:03.362754Z","iopub.execute_input":"2025-04-22T02:47:03.363140Z","iopub.status.idle":"2025-04-22T02:47:03.387020Z","shell.execute_reply.started":"2025-04-22T02:47:03.363108Z","shell.execute_reply":"2025-04-22T02:47:03.386072Z"},"trusted":true},"outputs":[],"execution_count":4},{"cell_type":"code","source":"df_train_transaction = pd.read_csv(\"/kaggle/input/ieee-fraud-detection/train_transaction.csv\")\ndf_train_identity = pd.read_csv(\"/kaggle/input/ieee-fraud-detection/train_identity.csv\")","metadata":{"execution":{"iopub.status.busy":"2025-04-22T02:47:03.387877Z","iopub.execute_input":"2025-04-22T02:47:03.388180Z","iopub.status.idle":"2025-04-22T02:47:33.627759Z","shell.execute_reply.started":"2025-04-22T02:47:03.388151Z","shell.execute_reply":"2025-04-22T02:47:33.626777Z"},"trusted":true},"outputs":[],"execution_count":5},{"cell_type":"code","source":"df_train = pd.merge(df_train_transaction, df_train_identity, on=\"TransactionID\", how=\"left\")","metadata":{"execution":{"iopub.status.busy":"2025-04-22T02:47:33.628871Z","iopub.execute_input":"2025-04-22T02:47:33.629143Z","iopub.status.idle":"2025-04-22T02:47:34.559813Z","shell.execute_reply.started":"2025-04-22T02:47:33.629122Z","shell.execute_reply":"2025-04-22T02:47:34.558888Z"},"trusted":true},"outputs":[],"execution_count":6},{"cell_type":"code","source":"df_train.drop('TransactionID', axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2025-04-22T02:47:34.560581Z","iopub.execute_input":"2025-04-22T02:47:34.560845Z","iopub.status.idle":"2025-04-22T02:47:35.250892Z","shell.execute_reply.started":"2025-04-22T02:47:34.560824Z","shell.execute_reply":"2025-04-22T02:47:35.249844Z"},"trusted":true},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"# Train/Test Split","metadata":{}},{"cell_type":"code","source":"X_train, X_test = train_test_split(df_train, test_size=0.2, random_state=random_state)\n\nX_train = X_train.reset_index(drop=True)\nX_test = X_test.reset_index(drop=True)\n\ny_train = X_train.pop('isFraud')\ny_test = X_test.pop('isFraud')","metadata":{"execution":{"iopub.status.busy":"2025-04-22T02:47:35.251772Z","iopub.execute_input":"2025-04-22T02:47:35.252020Z","iopub.status.idle":"2025-04-22T02:47:40.399864Z","shell.execute_reply.started":"2025-04-22T02:47:35.251994Z","shell.execute_reply":"2025-04-22T02:47:40.398838Z"},"trusted":true},"outputs":[],"execution_count":8},{"cell_type":"markdown","source":"# Preprocessing","metadata":{}},{"cell_type":"markdown","source":"## Handling NaNs","metadata":{}},{"cell_type":"code","source":"class SimpleNAPreprocessor(BaseEstimator, TransformerMixin):\n  \"\"\"Fills NaNs with mode for categorical columns and with median for numerical columns.\"\"\"\n\n  def __init__(self):\n    self.cat_cols_modes = {'ProductCD': 'W', 'card4': 'visa', 'card6': 'debit', 'P_emaildomain': 'gmail.com', 'R_emaildomain': 'gmail.com', 'M1': 'T', 'M2': 'T', 'M3': 'T', 'M4': 'M0', 'M5': 'F', 'M6': 'F', 'M7': 'F', 'M8': 'F', 'M9': 'T', 'id_12': 'NotFound', 'id_15': 'Found', 'id_16': 'Found', 'id_23': 'IP_PROXY:TRANSPARENT', 'id_27': 'Found', 'id_28': 'Found', 'id_29': 'Found', 'id_30': 'Windows 10', 'id_31': 'chrome 63.0', 'id_33': '1920x1080', 'id_34': 'match_status:2', 'id_35': 'T', 'id_36': 'F', 'id_37': 'T', 'id_38': 'F', 'DeviceType': 'desktop', 'DeviceInfo': 'Windows'}\n    self.num_cols_medians = {'TransactionDT': 7310134.5, 'TransactionAmt': 68.95, 'card1': 9680.0, 'card2': 361.0, 'card3': 150.0, 'card5': 226.0, 'addr1': 299.0, 'addr2': 87.0, 'dist1': 8.0, 'dist2': 37.0, 'C1': 1.0, 'C2': 1.0, 'C3': 0.0, 'C4': 0.0, 'C5': 0.0, 'C6': 1.0, 'C7': 0.0, 'C8': 0.0, 'C9': 1.0, 'C10': 0.0, 'C11': 1.0, 'C12': 0.0, 'C13': 3.0, 'C14': 1.0, 'D1': 3.0, 'D2': 97.0, 'D3': 8.0, 'D4': 26.0, 'D5': 10.0, 'D6': 0.0, 'D7': 0.0, 'D8': 37.83333206176758, 'D9': 0.6666659712791443, 'D10': 15.0, 'D11': 42.0, 'D12': 0.0, 'D13': 0.0, 'D14': 0.0, 'D15': 52.0, 'V1': 1.0, 'V2': 1.0, 'V3': 1.0, 'V4': 1.0, 'V5': 1.0, 'V6': 1.0, 'V7': 1.0, 'V8': 1.0, 'V9': 1.0, 'V10': 0.0, 'V11': 0.0, 'V12': 1.0, 'V13': 1.0, 'V14': 1.0, 'V15': 0.0, 'V16': 0.0, 'V17': 0.0, 'V18': 0.0, 'V19': 1.0, 'V20': 1.0, 'V21': 0.0, 'V22': 0.0, 'V23': 1.0, 'V24': 1.0, 'V25': 1.0, 'V26': 1.0, 'V27': 0.0, 'V28': 0.0, 'V29': 0.0, 'V30': 0.0, 'V31': 0.0, 'V32': 0.0, 'V33': 0.0, 'V34': 0.0, 'V35': 1.0, 'V36': 1.0, 'V37': 1.0, 'V38': 1.0, 'V39': 0.0, 'V40': 0.0, 'V41': 1.0, 'V42': 0.0, 'V43': 0.0, 'V44': 1.0, 'V45': 1.0, 'V46': 1.0, 'V47': 1.0, 'V48': 0.0, 'V49': 0.0, 'V50': 0.0, 'V51': 0.0, 'V52': 0.0, 'V53': 1.0, 'V54': 1.0, 'V55': 1.0, 'V56': 1.0, 'V57': 0.0, 'V58': 0.0, 'V59': 0.0, 'V60': 0.0, 'V61': 1.0, 'V62': 1.0, 'V63': 0.0, 'V64': 0.0, 'V65': 1.0, 'V66': 1.0, 'V67': 1.0, 'V68': 0.0, 'V69': 0.0, 'V70': 0.0, 'V71': 0.0, 'V72': 0.0, 'V73': 0.0, 'V74': 0.0, 'V75': 1.0, 'V76': 1.0, 'V77': 1.0, 'V78': 1.0, 'V79': 0.0, 'V80': 0.0, 'V81': 0.0, 'V82': 1.0, 'V83': 1.0, 'V84': 0.0, 'V85': 0.0, 'V86': 1.0, 'V87': 1.0, 'V88': 1.0, 'V89': 0.0, 'V90': 0.0, 'V91': 0.0, 'V92': 0.0, 'V93': 0.0, 'V94': 0.0, 'V95': 0.0, 'V96': 0.0, 'V97': 0.0, 'V98': 0.0, 'V99': 0.0, 'V100': 0.0, 'V101': 0.0, 'V102': 0.0, 'V103': 0.0, 'V104': 0.0, 'V105': 0.0, 'V106': 0.0, 'V107': 1.0, 'V108': 1.0, 'V109': 1.0, 'V110': 1.0, 'V111': 1.0, 'V112': 1.0, 'V113': 1.0, 'V114': 1.0, 'V115': 1.0, 'V116': 1.0, 'V117': 1.0, 'V118': 1.0, 'V119': 1.0, 'V120': 1.0, 'V121': 1.0, 'V122': 1.0, 'V123': 1.0, 'V124': 1.0, 'V125': 1.0, 'V126': 0.0, 'V127': 0.0, 'V128': 0.0, 'V129': 0.0, 'V130': 0.0, 'V131': 0.0, 'V132': 0.0, 'V133': 0.0, 'V134': 0.0, 'V135': 0.0, 'V136': 0.0, 'V137': 0.0, 'V138': 0.0, 'V139': 1.0, 'V140': 1.0, 'V141': 0.0, 'V142': 0.0, 'V143': 0.0, 'V144': 0.0, 'V145': 0.0, 'V146': 0.0, 'V147': 0.0, 'V148': 1.0, 'V149': 1.0, 'V150': 1.0, 'V151': 1.0, 'V152': 1.0, 'V153': 1.0, 'V154': 1.0, 'V155': 1.0, 'V156': 1.0, 'V157': 1.0, 'V158': 1.0, 'V159': 0.0, 'V160': 0.0, 'V161': 0.0, 'V162': 0.0, 'V163': 0.0, 'V164': 0.0, 'V165': 0.0, 'V166': 0.0, 'V167': 0.0, 'V168': 0.0, 'V169': 0.0, 'V170': 1.0, 'V171': 1.0, 'V172': 0.0, 'V173': 0.0, 'V174': 0.0, 'V175': 0.0, 'V176': 1.0, 'V177': 0.0, 'V178': 0.0, 'V179': 0.0, 'V180': 0.0, 'V181': 0.0, 'V182': 0.0, 'V183': 0.0, 'V184': 0.0, 'V185': 0.0, 'V186': 1.0, 'V187': 1.0, 'V188': 1.0, 'V189': 1.0, 'V190': 1.0, 'V191': 1.0, 'V192': 1.0, 'V193': 1.0, 'V194': 1.0, 'V195': 1.0, 'V196': 1.0, 'V197': 1.0, 'V198': 1.0, 'V199': 1.0, 'V200': 1.0, 'V201': 1.0, 'V202': 0.0, 'V203': 0.0, 'V204': 0.0, 'V205': 0.0, 'V206': 0.0, 'V207': 0.0, 'V208': 0.0, 'V209': 0.0, 'V210': 0.0, 'V211': 0.0, 'V212': 0.0, 'V213': 0.0, 'V214': 0.0, 'V215': 0.0, 'V216': 0.0, 'V217': 0.0, 'V218': 0.0, 'V219': 0.0, 'V220': 0.0, 'V221': 1.0, 'V222': 1.0, 'V223': 0.0, 'V224': 0.0, 'V225': 0.0, 'V226': 0.0, 'V227': 0.0, 'V228': 1.0, 'V229': 1.0, 'V230': 1.0, 'V231': 0.0, 'V232': 0.0, 'V233': 0.0, 'V234': 0.0, 'V235': 0.0, 'V236': 0.0, 'V237': 0.0, 'V238': 0.0, 'V239': 0.0, 'V240': 1.0, 'V241': 1.0, 'V242': 1.0, 'V243': 1.0, 'V244': 1.0, 'V245': 1.0, 'V246': 1.0, 'V247': 1.0, 'V248': 1.0, 'V249': 1.0, 'V250': 1.0, 'V251': 1.0, 'V252': 1.0, 'V253': 1.0, 'V254': 1.0, 'V255': 1.0, 'V256': 1.0, 'V257': 1.0, 'V258': 1.0, 'V259': 1.0, 'V260': 1.0, 'V261': 1.0, 'V262': 1.0, 'V263': 0.0, 'V264': 0.0, 'V265': 0.0, 'V266': 0.0, 'V267': 0.0, 'V268': 0.0, 'V269': 0.0, 'V270': 0.0, 'V271': 0.0, 'V272': 0.0, 'V273': 0.0, 'V274': 0.0, 'V275': 0.0, 'V276': 0.0, 'V277': 0.0, 'V278': 0.0, 'V279': 0.0, 'V280': 0.0, 'V281': 0.0, 'V282': 1.0, 'V283': 1.0, 'V284': 0.0, 'V285': 0.0, 'V286': 0.0, 'V287': 0.0, 'V288': 0.0, 'V289': 0.0, 'V290': 1.0, 'V291': 1.0, 'V292': 1.0, 'V293': 0.0, 'V294': 0.0, 'V295': 0.0, 'V296': 0.0, 'V297': 0.0, 'V298': 0.0, 'V299': 0.0, 'V300': 0.0, 'V301': 0.0, 'V302': 0.0, 'V303': 0.0, 'V304': 0.0, 'V305': 1.0, 'V306': 0.0, 'V307': 0.0, 'V308': 0.0, 'V309': 0.0, 'V310': 0.0, 'V311': 0.0, 'V312': 0.0, 'V313': 0.0, 'V314': 0.0, 'V315': 0.0, 'V316': 0.0, 'V317': 0.0, 'V318': 0.0, 'V319': 0.0, 'V320': 0.0, 'V321': 0.0, 'V322': 0.0, 'V323': 0.0, 'V324': 0.0, 'V325': 0.0, 'V326': 0.0, 'V327': 0.0, 'V328': 0.0, 'V329': 0.0, 'V330': 0.0, 'V331': 0.0, 'V332': 0.0, 'V333': 0.0, 'V334': 0.0, 'V335': 0.0, 'V336': 0.0, 'V337': 0.0, 'V338': 0.0, 'V339': 0.0, 'id_01': -5.0, 'id_02': 125890.0, 'id_03': 0.0, 'id_04': 0.0, 'id_05': 0.0, 'id_06': 0.0, 'id_07': 14.0, 'id_08': -34.0, 'id_09': 0.0, 'id_10': 0.0, 'id_11': 100.0, 'id_13': 52.0, 'id_14': -300.0, 'id_17': 166.0, 'id_18': 15.0, 'id_19': 341.0, 'id_20': 472.0, 'id_21': 252.0, 'id_22': 14.0, 'id_24': 11.0, 'id_25': 321.0, 'id_26': 147.0, 'id_32': 24.0}\n\n  def fit(self, X, y):\n    self.cat_cols, self.num_cols = get_cat_num_cols(X)\n    return self\n\n  def transform(self, X):\n    X_work = X.copy()\n\n    # fill categorical missing values with mode\n    for catcol in self.cat_cols:\n      X_work.fillna({catcol: self.cat_cols_modes[catcol]}, inplace=True)\n\n    # fill numerical missing values with median\n    for numcol in self.num_cols:\n      X_work.fillna({numcol: self.num_cols_medians[numcol]}, inplace=True)\n\n    return X_work","metadata":{"execution":{"iopub.status.busy":"2025-04-22T02:47:40.400765Z","iopub.execute_input":"2025-04-22T02:47:40.401062Z","iopub.status.idle":"2025-04-22T02:47:40.431445Z","shell.execute_reply.started":"2025-04-22T02:47:40.401035Z","shell.execute_reply":"2025-04-22T02:47:40.430626Z"},"trusted":true},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"## Categoric to Numeric Conversions","metadata":{}},{"cell_type":"code","source":"class EncoderPreprocessor(BaseEstimator, TransformerMixin):\n    \"\"\"Performs WoE and One-Hot Encoding.\"\"\"\n    \n    def __init__(self, onehot_threshold: int, onehot_prefix: str, ):\n        self.onehot_prefix = onehot_prefix\n        self.onehot_threshold = onehot_threshold\n        self.onehot_columns = ['M1', 'M2', 'M3', 'M4', 'M5', 'M6', 'M7', 'M8', 'M9', 'id_12', 'id_15', 'id_16', 'id_23', 'id_27', 'id_28', 'id_29', 'id_35', 'id_36', 'id_37', 'id_38', 'DeviceType']\n        self.woe_columns = ['ProductCD', 'card4', 'card6', 'P_emaildomain', 'R_emaildomain', 'id_30', 'id_31', 'id_33', 'id_34', 'DeviceInfo']\n        self.woe_columns_fill_na = {'ProductCD': 'W', 'card4': 'visa', 'card6': 'debit', 'P_emaildomain': 'gmail.com', 'R_emaildomain': 'gmail.com', 'id_30': 'Windows 10', 'id_31': 'chrome 63.0', 'id_33': '1920x1080', 'id_34': 'match_status:2', 'DeviceInfo': 'Windows'}\n        self.expected_onehot_columns = ['M1_T', 'M1_nan', 'M2_T', 'M2_nan', 'M3_T', 'M3_nan', 'M4_M1', 'M4_M2', 'M4_nan', 'M5_T', 'M5_nan', 'M6_T', 'M6_nan', 'M7_T', 'M7_nan', 'M8_T', 'M8_nan', 'M9_T', 'M9_nan', 'id_12_NotFound', 'id_12_nan', 'id_15_New', 'id_15_Unknown', 'id_15_nan', 'id_16_NotFound', 'id_16_nan', 'id_23_IP_PROXY:HIDDEN', 'id_23_IP_PROXY:TRANSPARENT', 'id_23_nan', 'id_27_NotFound', 'id_27_nan', 'id_28_New', 'id_28_nan', 'id_29_NotFound', 'id_29_nan', 'id_35_T', 'id_35_nan', 'id_36_T', 'id_36_nan', 'id_37_T', 'id_37_nan', 'id_38_T', 'id_38_nan', 'DeviceType_mobile', 'DeviceType_nan']\n\n\n    def fit(self, X, y):\n        cat_cols, _ = get_cat_num_cols(X)\n\n        nuniques = X[cat_cols].nunique()\n\n        df_woe = X.copy()\n        target_col = 'target'\n        df_woe[target_col] = y\n\n        self.woe_mappings = {}\n        \n        for col in self.woe_columns:\n            groups = df_woe.groupby([col])[target_col].agg(['count', 'sum'])\n            groups.columns = ['n_obs', 'n_pos']\n            groups['n_neg'] = groups['n_obs'] - groups['n_pos']\n      \n            groups['prop_pos'] = groups['n_pos'] / groups['n_pos'].sum()\n            groups['prop_neg'] = groups['n_neg'] / groups['n_neg'].sum()\n      \n            groups['woe'] = np.log(groups['prop_pos'] / groups['prop_neg'])\n      \n            groups.replace([np.inf, -np.inf], 0, inplace=True)\n            groups.fillna(0, inplace=True)\n      \n            woe_dict = groups['woe'].to_dict()\n      \n            self.woe_mappings[col] = woe_dict\n\n        return self\n\n    def transform(self, X):\n        X_work = X.copy()\n\n        # Preprocess WOE Columns\n        for col in self.woe_columns:\n            X_work[f'{col}_woe'] = X_work[col].map(self.woe_mappings[col])\n            X_work.drop(columns=col, inplace=True)\n        \n        # apply One-Hot Encoding\n        df_dummy = pd.get_dummies(X_work, columns=self.onehot_columns, drop_first=True, dummy_na=True, dtype=int, prefix=self.onehot_prefix)\n\n        # categories in train but not in test\n        missing_cols = set(self.expected_onehot_columns) - set(df_dummy.columns)\n        for col in missing_cols:\n            df_dummy[col] = 0\n        \n        # categories in test but not in train\n        extra_cols = set(df_dummy.columns) - set(self.expected_onehot_columns) - set(X_work.columns)\n        if extra_cols:\n            df_dummy = df_dummy.drop(columns=list(extra_cols))\n\n        # maintain order\n        common_cols = list(set(X_work.columns) - set(self.onehot_columns))\n        X_work = df_dummy[common_cols + self.expected_onehot_columns]\n\n        n = X_work.isna().mean()\n\n        na_cols = list(n[n > 0].index)\n\n        for col in na_cols:\n            col_splitted = col.split(\"_\")\n            pr = col_splitted[-1]\n            name = '_'.join(col_splitted[:-1])\n            if pr != \"woe\":\n                print(\"Error Related to Nans\")\n\n            dic = self.woe_columns_fill_na\n            mappings = self.woe_mappings\n            X_work[col] = X_work[col].fillna(mappings[name][dic[name]])\n\n        return X_work","metadata":{"execution":{"iopub.status.busy":"2025-04-22T02:47:40.434000Z","iopub.execute_input":"2025-04-22T02:47:40.434490Z","iopub.status.idle":"2025-04-22T02:47:40.464106Z","shell.execute_reply.started":"2025-04-22T02:47:40.434462Z","shell.execute_reply":"2025-04-22T02:47:40.463121Z"},"trusted":true},"outputs":[],"execution_count":10},{"cell_type":"markdown","source":"## Feature Engineering","metadata":{}},{"cell_type":"code","source":"class FeatureEngineeringPreprocessor(BaseEstimator, TransformerMixin):\n\n  def __init__(self, transaction_dt_column_name: str):\n    self.transaction_dt_column_name = transaction_dt_column_name\n    self.features_to_drop = {'TransactionID', 'V278', 'V51', 'V317', 'V28', 'V153', 'V188', 'C6', 'V190', 'V295', 'V133', 'V57', 'V76', 'V242', 'V96', 'V218', 'V103', 'V276', 'V314', 'V128', 'V72', 'V198', 'V155', 'V192', 'V84', 'V292', 'V54', 'V238', 'V104', 'V145', 'V193', 'V154', 'V321', 'V79', 'C14', 'V212', 'V94', 'V143', 'V82', 'V106', 'V34', 'V304', 'V229', 'V30', 'V156', 'C1', 'V213', 'V299', 'V161', 'V91', 'V322', 'V332', 'V200', 'V214', 'V8', 'V194', 'V163', 'V73', 'V146', 'V131', 'C7', 'V196', 'V15', 'V164', 'V142', 'V44', 'V221', 'V293', 'V168', 'V134', 'V230', 'V336', 'V22', 'V264', 'V32', 'V216', 'V255', 'V113', 'V69', 'V64', 'V130', 'V335', 'V66', 'V63', 'V294', 'V339', 'V252', 'V177', 'V71', 'V59', 'V269', 'V135', 'V16', 'V245', 'V231', 'C12', 'V19', 'V246', 'V132', 'V58', 'V182', 'V307', 'V11', 'V159', 'V207', 'V144', 'V300', 'V253', 'V176', 'V288', 'V204', 'V37', 'V4', 'V329', 'V206', 'V152', 'C8', 'V273', 'V217', 'V326', 'V178', 'V125', 'V25', 'V70', 'V303', 'V93', 'V160', 'D2', 'V183', 'V211', 'V202', 'V265', 'V119', 'V236', 'V97', 'V126', 'V306', 'V180', 'V149', 'V267', 'V186', 'V261', 'C5', 'V21', 'V219', 'V311', 'V81', 'V179', 'V110', 'V191', 'V318', 'V39', 'V224', 'V248', 'V33', 'V331', 'V105', 'V127', 'V323', 'V49', 'V330', 'V291', 'V116', 'V129', 'V275', 'V50', 'V313', 'V333', 'V237', 'V189', 'V148', 'V36', 'V7', 'C4', 'V31', 'V74', 'V102', 'V43', 'V42', 'C10', 'V328', 'V151', 'C11', 'V298', 'V157', 'V136', 'V251', 'V17', 'V272', 'V243', 'V87', 'V185', 'V297', 'V137', 'V254', 'V60', 'V270', 'V85', 'V279', 'V100', 'V324', 'V308', 'V80', 'V274', 'V249', 'V139', 'V167', 'V316', 'V285', 'V95', 'V259', 'V101', 'V280', 'V61', 'V334', 'V13', 'V233', 'V90', 'V92', 'V24'}\n  \n  def fit(self, X, y):\n    return self\n\n  def transform(self, X):\n    X_work = X.copy()\n\n    seconds = X_work[self.transaction_dt_column_name]\n    X_work['hour_of_day'] = (seconds // (60 * 60)) % 24\n    X_work['day_of_week'] = (seconds // (24 * 60 * 60)) % 7\n    X_work['is_weekend'] = X_work['day_of_week'].isin([5,6]).astype(int)\n\n    X_work.drop(self.transaction_dt_column_name, axis=1, inplace=True)\n\n    X_work.drop(self.features_to_drop, axis=1, inplace=True, errors=\"ignore\")\n\n    return X_work","metadata":{"execution":{"iopub.status.busy":"2025-04-22T02:47:40.465068Z","iopub.execute_input":"2025-04-22T02:47:40.465332Z","iopub.status.idle":"2025-04-22T02:47:40.490579Z","shell.execute_reply.started":"2025-04-22T02:47:40.465313Z","shell.execute_reply":"2025-04-22T02:47:40.489745Z"},"trusted":true},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"# Define Pipeline","metadata":{}},{"cell_type":"code","source":"onehot_prefix = \"onehott\"\ntransaction_dt_column_name = \"TransactionDT\"\n\npreprocessor_steps = [\n    ('na_filler', SimpleNAPreprocessor()),\n    ('encoder', EncoderPreprocessor(onehot_threshold=3, onehot_prefix=onehot_prefix)),\n    ('feature_engineer', FeatureEngineeringPreprocessor(transaction_dt_column_name=transaction_dt_column_name)),\n]\n\npreprocessor_pipeline = ImbPipeline(steps=preprocessor_steps)\n\npreprocessor_pipeline.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T02:47:40.491451Z","iopub.execute_input":"2025-04-22T02:47:40.491730Z","iopub.status.idle":"2025-04-22T02:47:58.975326Z","shell.execute_reply.started":"2025-04-22T02:47:40.491700Z","shell.execute_reply":"2025-04-22T02:47:58.974467Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('na_filler', SimpleNAPreprocessor()),\n                ('encoder',\n                 EncoderPreprocessor(onehot_prefix='onehott',\n                                     onehot_threshold=3)),\n                ('feature_engineer',\n                 FeatureEngineeringPreprocessor(transaction_dt_column_name='TransactionDT'))])","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;na_filler&#x27;, SimpleNAPreprocessor()),\n                (&#x27;encoder&#x27;,\n                 EncoderPreprocessor(onehot_prefix=&#x27;onehott&#x27;,\n                                     onehot_threshold=3)),\n                (&#x27;feature_engineer&#x27;,\n                 FeatureEngineeringPreprocessor(transaction_dt_column_name=&#x27;TransactionDT&#x27;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;na_filler&#x27;, SimpleNAPreprocessor()),\n                (&#x27;encoder&#x27;,\n                 EncoderPreprocessor(onehot_prefix=&#x27;onehott&#x27;,\n                                     onehot_threshold=3)),\n                (&#x27;feature_engineer&#x27;,\n                 FeatureEngineeringPreprocessor(transaction_dt_column_name=&#x27;TransactionDT&#x27;))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleNAPreprocessor</label><div class=\"sk-toggleable__content\"><pre>SimpleNAPreprocessor()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">EncoderPreprocessor</label><div class=\"sk-toggleable__content\"><pre>EncoderPreprocessor(onehot_prefix=&#x27;onehott&#x27;, onehot_threshold=3)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FeatureEngineeringPreprocessor</label><div class=\"sk-toggleable__content\"><pre>FeatureEngineeringPreprocessor(transaction_dt_column_name=&#x27;TransactionDT&#x27;)</pre></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"# Upload on Dagshub","metadata":{}},{"cell_type":"code","source":"dagshub.init(repo_owner='b3tameche', repo_name='kaggle-fraud-detection', mlflow=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T02:48:17.849062Z","iopub.execute_input":"2025-04-22T02:48:17.849382Z","iopub.status.idle":"2025-04-22T02:48:22.757966Z","shell.execute_reply.started":"2025-04-22T02:48:17.849357Z","shell.execute_reply":"2025-04-22T02:48:22.757168Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"                                       \u001b[1m❗❗❗ AUTHORIZATION REQUIRED ❗❗❗\u001b[0m                                        \n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">                                       <span style=\"font-weight: bold\">❗❗❗ AUTHORIZATION REQUIRED ❗❗❗</span>                                        \n</pre>\n"},"metadata":{}},{"name":"stdout","text":"\n\nOpen the following link in your browser to authorize the client:\nhttps://dagshub.com/login/oauth/authorize?state=36668680-f5b0-4b4a-8424-b1e20328e891&client_id=32b60ba385aa7cecf24046d8195a71c07dd345d9657977863b52e7748e0f0f28&middleman_request_id=cd24d84f243902daf0a439ff536373cbca15235c9bfc0c317830e20adf26a924\n\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Output()","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Accessing as b3tameche\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Accessing as b3tameche\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Initialized MLflow to track repo \u001b[32m\"b3tameche/kaggle-fraud-detection\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Initialized MLflow to track repo <span style=\"color: #008000; text-decoration-color: #008000\">\"b3tameche/kaggle-fraud-detection\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Repository b3tameche/kaggle-fraud-detection initialized!\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Repository b3tameche/kaggle-fraud-detection initialized!\n</pre>\n"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"experiment_name = \"Preprocessor\"\nrun_preprocessor = \"General_Preprocessor\"\n\nmlflow.set_experiment(experiment_name)\n\nwith mlflow.start_run(run_name=run_preprocessor):\n    mlflow.log_param('na_fillercat_cols_modes', preprocessor_pipeline['na_filler'].cat_cols_modes)\n    mlflow.log_param('na_filler_num_cols_medians', preprocessor_pipeline['na_filler'].num_cols_medians)\n    mlflow.log_param('encoder_onehot_threshold', preprocessor_pipeline['encoder'].onehot_threshold)\n    mlflow.log_param('encoder_onehot_columns', preprocessor_pipeline['encoder'].onehot_columns)\n    mlflow.log_param('encoder_woe_columns', preprocessor_pipeline['encoder'].woe_columns)\n    mlflow.log_param('encoder_woe_columns_fill_na', preprocessor_pipeline['encoder'].woe_columns_fill_na)\n    mlflow.log_param('encoder_expected_onehot_columns', preprocessor_pipeline['encoder'].expected_onehot_columns)\n    mlflow.log_param('feature_engineer_features_to_drop', preprocessor_pipeline['feature_engineer'].features_to_drop)\n\n    mlflow.sklearn.log_model(preprocessor_pipeline, 'preprocessor_pipeline')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T02:54:38.210123Z","iopub.execute_input":"2025-04-22T02:54:38.210505Z","iopub.status.idle":"2025-04-22T02:54:53.385758Z","shell.execute_reply.started":"2025-04-22T02:54:38.210477Z","shell.execute_reply":"2025-04-22T02:54:53.384836Z"}},"outputs":[{"name":"stderr","text":"2025/04/22 02:54:39 WARNING mlflow.sklearn: Model was missing function: predict. Not logging python_function flavor!\n\u001b[31m2025/04/22 02:54:50 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n","output_type":"stream"},{"name":"stdout","text":"🏃 View run General_Preprocessor at: https://dagshub.com/b3tameche/kaggle-fraud-detection.mlflow/#/experiments/3/runs/5058ffc9d9934f49afda0cb7bc1745ec\n🧪 View experiment at: https://dagshub.com/b3tameche/kaggle-fraud-detection.mlflow/#/experiments/3\n","output_type":"stream"}],"execution_count":15}]}